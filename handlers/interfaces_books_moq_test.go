// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handlers

import (
	"context"
	"github.com/PauloPortugal/gin-gonic-rest-mongodb/model"
	"sync"
)

// Ensure, that booksMock does implement books.
// If this is not the case, regenerate this file with moq.
var _ books = &booksMock{}

// booksMock is a mock implementation of books.
//
// 	func TestSomethingThatUsesbooks(t *testing.T) {
//
// 		// make and configure a mocked books
// 		mockedbooks := &booksMock{
// 			AddBookFunc: func(ctx context.Context, book *model.Book) error {
// 				panic("mock out the AddBook method")
// 			},
// 			DeleteBookFunc: func(ctx context.Context, id string) (int, error) {
// 				panic("mock out the DeleteBook method")
// 			},
// 			GetBookFunc: func(ctx context.Context, id string) (model.Book, error) {
// 				panic("mock out the GetBook method")
// 			},
// 			ListBooksFunc: func(ctx context.Context) ([]model.Book, error) {
// 				panic("mock out the ListBooks method")
// 			},
// 			SearchBooksFunc: func(ctx context.Context, tag string) ([]model.Book, error) {
// 				panic("mock out the SearchBooks method")
// 			},
// 			UpdateBookFunc: func(ctx context.Context, id string, book model.Book) (int, error) {
// 				panic("mock out the UpdateBook method")
// 			},
// 		}
//
// 		// use mockedbooks in code that requires books
// 		// and then make assertions.
//
// 	}
type booksMock struct {
	// AddBookFunc mocks the AddBook method.
	AddBookFunc func(ctx context.Context, book *model.Book) error

	// DeleteBookFunc mocks the DeleteBook method.
	DeleteBookFunc func(ctx context.Context, id string) (int, error)

	// GetBookFunc mocks the GetBook method.
	GetBookFunc func(ctx context.Context, id string) (model.Book, error)

	// ListBooksFunc mocks the ListBooks method.
	ListBooksFunc func(ctx context.Context) ([]model.Book, error)

	// SearchBooksFunc mocks the SearchBooks method.
	SearchBooksFunc func(ctx context.Context, tag string) ([]model.Book, error)

	// UpdateBookFunc mocks the UpdateBook method.
	UpdateBookFunc func(ctx context.Context, id string, book model.Book) (int, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddBook holds details about calls to the AddBook method.
		AddBook []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Book is the book argument value.
			Book *model.Book
		}
		// DeleteBook holds details about calls to the DeleteBook method.
		DeleteBook []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetBook holds details about calls to the GetBook method.
		GetBook []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ListBooks holds details about calls to the ListBooks method.
		ListBooks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// SearchBooks holds details about calls to the SearchBooks method.
		SearchBooks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tag is the tag argument value.
			Tag string
		}
		// UpdateBook holds details about calls to the UpdateBook method.
		UpdateBook []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Book is the book argument value.
			Book model.Book
		}
	}
	lockAddBook     sync.RWMutex
	lockDeleteBook  sync.RWMutex
	lockGetBook     sync.RWMutex
	lockListBooks   sync.RWMutex
	lockSearchBooks sync.RWMutex
	lockUpdateBook  sync.RWMutex
}

// AddBook calls AddBookFunc.
func (mock *booksMock) AddBook(ctx context.Context, book *model.Book) error {
	if mock.AddBookFunc == nil {
		panic("booksMock.AddBookFunc: method is nil but books.AddBook was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Book *model.Book
	}{
		Ctx:  ctx,
		Book: book,
	}
	mock.lockAddBook.Lock()
	mock.calls.AddBook = append(mock.calls.AddBook, callInfo)
	mock.lockAddBook.Unlock()
	return mock.AddBookFunc(ctx, book)
}

// AddBookCalls gets all the calls that were made to AddBook.
// Check the length with:
//     len(mockedbooks.AddBookCalls())
func (mock *booksMock) AddBookCalls() []struct {
	Ctx  context.Context
	Book *model.Book
} {
	var calls []struct {
		Ctx  context.Context
		Book *model.Book
	}
	mock.lockAddBook.RLock()
	calls = mock.calls.AddBook
	mock.lockAddBook.RUnlock()
	return calls
}

// DeleteBook calls DeleteBookFunc.
func (mock *booksMock) DeleteBook(ctx context.Context, id string) (int, error) {
	if mock.DeleteBookFunc == nil {
		panic("booksMock.DeleteBookFunc: method is nil but books.DeleteBook was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteBook.Lock()
	mock.calls.DeleteBook = append(mock.calls.DeleteBook, callInfo)
	mock.lockDeleteBook.Unlock()
	return mock.DeleteBookFunc(ctx, id)
}

// DeleteBookCalls gets all the calls that were made to DeleteBook.
// Check the length with:
//     len(mockedbooks.DeleteBookCalls())
func (mock *booksMock) DeleteBookCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDeleteBook.RLock()
	calls = mock.calls.DeleteBook
	mock.lockDeleteBook.RUnlock()
	return calls
}

// GetBook calls GetBookFunc.
func (mock *booksMock) GetBook(ctx context.Context, id string) (model.Book, error) {
	if mock.GetBookFunc == nil {
		panic("booksMock.GetBookFunc: method is nil but books.GetBook was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetBook.Lock()
	mock.calls.GetBook = append(mock.calls.GetBook, callInfo)
	mock.lockGetBook.Unlock()
	return mock.GetBookFunc(ctx, id)
}

// GetBookCalls gets all the calls that were made to GetBook.
// Check the length with:
//     len(mockedbooks.GetBookCalls())
func (mock *booksMock) GetBookCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetBook.RLock()
	calls = mock.calls.GetBook
	mock.lockGetBook.RUnlock()
	return calls
}

// ListBooks calls ListBooksFunc.
func (mock *booksMock) ListBooks(ctx context.Context) ([]model.Book, error) {
	if mock.ListBooksFunc == nil {
		panic("booksMock.ListBooksFunc: method is nil but books.ListBooks was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListBooks.Lock()
	mock.calls.ListBooks = append(mock.calls.ListBooks, callInfo)
	mock.lockListBooks.Unlock()
	return mock.ListBooksFunc(ctx)
}

// ListBooksCalls gets all the calls that were made to ListBooks.
// Check the length with:
//     len(mockedbooks.ListBooksCalls())
func (mock *booksMock) ListBooksCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockListBooks.RLock()
	calls = mock.calls.ListBooks
	mock.lockListBooks.RUnlock()
	return calls
}

// SearchBooks calls SearchBooksFunc.
func (mock *booksMock) SearchBooks(ctx context.Context, tag string) ([]model.Book, error) {
	if mock.SearchBooksFunc == nil {
		panic("booksMock.SearchBooksFunc: method is nil but books.SearchBooks was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Tag string
	}{
		Ctx: ctx,
		Tag: tag,
	}
	mock.lockSearchBooks.Lock()
	mock.calls.SearchBooks = append(mock.calls.SearchBooks, callInfo)
	mock.lockSearchBooks.Unlock()
	return mock.SearchBooksFunc(ctx, tag)
}

// SearchBooksCalls gets all the calls that were made to SearchBooks.
// Check the length with:
//     len(mockedbooks.SearchBooksCalls())
func (mock *booksMock) SearchBooksCalls() []struct {
	Ctx context.Context
	Tag string
} {
	var calls []struct {
		Ctx context.Context
		Tag string
	}
	mock.lockSearchBooks.RLock()
	calls = mock.calls.SearchBooks
	mock.lockSearchBooks.RUnlock()
	return calls
}

// UpdateBook calls UpdateBookFunc.
func (mock *booksMock) UpdateBook(ctx context.Context, id string, book model.Book) (int, error) {
	if mock.UpdateBookFunc == nil {
		panic("booksMock.UpdateBookFunc: method is nil but books.UpdateBook was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		ID   string
		Book model.Book
	}{
		Ctx:  ctx,
		ID:   id,
		Book: book,
	}
	mock.lockUpdateBook.Lock()
	mock.calls.UpdateBook = append(mock.calls.UpdateBook, callInfo)
	mock.lockUpdateBook.Unlock()
	return mock.UpdateBookFunc(ctx, id, book)
}

// UpdateBookCalls gets all the calls that were made to UpdateBook.
// Check the length with:
//     len(mockedbooks.UpdateBookCalls())
func (mock *booksMock) UpdateBookCalls() []struct {
	Ctx  context.Context
	ID   string
	Book model.Book
} {
	var calls []struct {
		Ctx  context.Context
		ID   string
		Book model.Book
	}
	mock.lockUpdateBook.RLock()
	calls = mock.calls.UpdateBook
	mock.lockUpdateBook.RUnlock()
	return calls
}
