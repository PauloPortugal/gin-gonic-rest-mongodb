// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handlers

import (
	"context"
	"github.com/PauloPortugal/gin-gonic-rest-mongodb/model"
	"sync"
)

// Ensure, that redisMock does implement redis.
// If this is not the case, regenerate this file with moq.
var _ redis = &redisMock{}

// redisMock is a mock implementation of redis.
//
// 	func TestSomethingThatUsesredis(t *testing.T) {
//
// 		// make and configure a mocked redis
// 		mockedredis := &redisMock{
// 			DeleteEntryFunc: func(ctx context.Context, id string)  {
// 				panic("mock out the DeleteEntry method")
// 			},
// 			GetBookFunc: func(ctx context.Context, id string) (model.Book, error) {
// 				panic("mock out the GetBook method")
// 			},
// 			GetBooksFunc: func(ctx context.Context) ([]model.Book, error) {
// 				panic("mock out the GetBooks method")
// 			},
// 			SetBookFunc: func(ctx context.Context, id string, book model.Book) error {
// 				panic("mock out the SetBook method")
// 			},
// 			SetBooksFunc: func(ctx context.Context, books []model.Book) error {
// 				panic("mock out the SetBooks method")
// 			},
// 		}
//
// 		// use mockedredis in code that requires redis
// 		// and then make assertions.
//
// 	}
type redisMock struct {
	// DeleteEntryFunc mocks the DeleteEntry method.
	DeleteEntryFunc func(ctx context.Context, id string)

	// GetBookFunc mocks the GetBook method.
	GetBookFunc func(ctx context.Context, id string) (model.Book, error)

	// GetBooksFunc mocks the GetBooks method.
	GetBooksFunc func(ctx context.Context) ([]model.Book, error)

	// SetBookFunc mocks the SetBook method.
	SetBookFunc func(ctx context.Context, id string, book model.Book) error

	// SetBooksFunc mocks the SetBooks method.
	SetBooksFunc func(ctx context.Context, books []model.Book) error

	// calls tracks calls to the methods.
	calls struct {
		// DeleteEntry holds details about calls to the DeleteEntry method.
		DeleteEntry []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetBook holds details about calls to the GetBook method.
		GetBook []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetBooks holds details about calls to the GetBooks method.
		GetBooks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// SetBook holds details about calls to the SetBook method.
		SetBook []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Book is the book argument value.
			Book model.Book
		}
		// SetBooks holds details about calls to the SetBooks method.
		SetBooks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Books is the books argument value.
			Books []model.Book
		}
	}
	lockDeleteEntry sync.RWMutex
	lockGetBook     sync.RWMutex
	lockGetBooks    sync.RWMutex
	lockSetBook     sync.RWMutex
	lockSetBooks    sync.RWMutex
}

// DeleteEntry calls DeleteEntryFunc.
func (mock *redisMock) DeleteEntry(ctx context.Context, id string) {
	if mock.DeleteEntryFunc == nil {
		panic("redisMock.DeleteEntryFunc: method is nil but redis.DeleteEntry was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteEntry.Lock()
	mock.calls.DeleteEntry = append(mock.calls.DeleteEntry, callInfo)
	mock.lockDeleteEntry.Unlock()
	mock.DeleteEntryFunc(ctx, id)
}

// DeleteEntryCalls gets all the calls that were made to DeleteEntry.
// Check the length with:
//     len(mockedredis.DeleteEntryCalls())
func (mock *redisMock) DeleteEntryCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDeleteEntry.RLock()
	calls = mock.calls.DeleteEntry
	mock.lockDeleteEntry.RUnlock()
	return calls
}

// GetBook calls GetBookFunc.
func (mock *redisMock) GetBook(ctx context.Context, id string) (model.Book, error) {
	if mock.GetBookFunc == nil {
		panic("redisMock.GetBookFunc: method is nil but redis.GetBook was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetBook.Lock()
	mock.calls.GetBook = append(mock.calls.GetBook, callInfo)
	mock.lockGetBook.Unlock()
	return mock.GetBookFunc(ctx, id)
}

// GetBookCalls gets all the calls that were made to GetBook.
// Check the length with:
//     len(mockedredis.GetBookCalls())
func (mock *redisMock) GetBookCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetBook.RLock()
	calls = mock.calls.GetBook
	mock.lockGetBook.RUnlock()
	return calls
}

// GetBooks calls GetBooksFunc.
func (mock *redisMock) GetBooks(ctx context.Context) ([]model.Book, error) {
	if mock.GetBooksFunc == nil {
		panic("redisMock.GetBooksFunc: method is nil but redis.GetBooks was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetBooks.Lock()
	mock.calls.GetBooks = append(mock.calls.GetBooks, callInfo)
	mock.lockGetBooks.Unlock()
	return mock.GetBooksFunc(ctx)
}

// GetBooksCalls gets all the calls that were made to GetBooks.
// Check the length with:
//     len(mockedredis.GetBooksCalls())
func (mock *redisMock) GetBooksCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetBooks.RLock()
	calls = mock.calls.GetBooks
	mock.lockGetBooks.RUnlock()
	return calls
}

// SetBook calls SetBookFunc.
func (mock *redisMock) SetBook(ctx context.Context, id string, book model.Book) error {
	if mock.SetBookFunc == nil {
		panic("redisMock.SetBookFunc: method is nil but redis.SetBook was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		ID   string
		Book model.Book
	}{
		Ctx:  ctx,
		ID:   id,
		Book: book,
	}
	mock.lockSetBook.Lock()
	mock.calls.SetBook = append(mock.calls.SetBook, callInfo)
	mock.lockSetBook.Unlock()
	return mock.SetBookFunc(ctx, id, book)
}

// SetBookCalls gets all the calls that were made to SetBook.
// Check the length with:
//     len(mockedredis.SetBookCalls())
func (mock *redisMock) SetBookCalls() []struct {
	Ctx  context.Context
	ID   string
	Book model.Book
} {
	var calls []struct {
		Ctx  context.Context
		ID   string
		Book model.Book
	}
	mock.lockSetBook.RLock()
	calls = mock.calls.SetBook
	mock.lockSetBook.RUnlock()
	return calls
}

// SetBooks calls SetBooksFunc.
func (mock *redisMock) SetBooks(ctx context.Context, books []model.Book) error {
	if mock.SetBooksFunc == nil {
		panic("redisMock.SetBooksFunc: method is nil but redis.SetBooks was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Books []model.Book
	}{
		Ctx:   ctx,
		Books: books,
	}
	mock.lockSetBooks.Lock()
	mock.calls.SetBooks = append(mock.calls.SetBooks, callInfo)
	mock.lockSetBooks.Unlock()
	return mock.SetBooksFunc(ctx, books)
}

// SetBooksCalls gets all the calls that were made to SetBooks.
// Check the length with:
//     len(mockedredis.SetBooksCalls())
func (mock *redisMock) SetBooksCalls() []struct {
	Ctx   context.Context
	Books []model.Book
} {
	var calls []struct {
		Ctx   context.Context
		Books []model.Book
	}
	mock.lockSetBooks.RLock()
	calls = mock.calls.SetBooks
	mock.lockSetBooks.RUnlock()
	return calls
}
