// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handlers

import (
	"context"
	"github.com/PauloPortugal/gin-gonic-rest-mongodb/model"
	"sync"
)

// Ensure, that usersMock does implement users.
// If this is not the case, regenerate this file with moq.
var _ users = &usersMock{}

// usersMock is a mock implementation of users.
//
// 	func TestSomethingThatUsesusers(t *testing.T) {
//
// 		// make and configure a mocked users
// 		mockedusers := &usersMock{
// 			GetFunc: func(ctx context.Context, username string, password string) (model.User, error) {
// 				panic("mock out the Get method")
// 			},
// 		}
//
// 		// use mockedusers in code that requires users
// 		// and then make assertions.
//
// 	}
type usersMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, username string, password string) (model.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
			// Password is the password argument value.
			Password string
		}
	}
	lockGet sync.RWMutex
}

// Get calls GetFunc.
func (mock *usersMock) Get(ctx context.Context, username string, password string) (model.User, error) {
	if mock.GetFunc == nil {
		panic("usersMock.GetFunc: method is nil but users.Get was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
		Password string
	}{
		Ctx:      ctx,
		Username: username,
		Password: password,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, username, password)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedusers.GetCalls())
func (mock *usersMock) GetCalls() []struct {
	Ctx      context.Context
	Username string
	Password string
} {
	var calls []struct {
		Ctx      context.Context
		Username string
		Password string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}
